import os, zipfile, mimetypes, traceback
import streamlit as st
import pandas as pd
from openpyxl import load_workbook

st.set_page_config(page_title="Dashboard Doanh Thu", layout="wide")

# =========================================================
# H√ÄM DEBUG & ƒê·ªåC FILE AN TO√ÄN
# =========================================================
def read_file_debug(path, label="file"):
    st.markdown(f"### üîç Debug ƒë·ªçc {label}: `{path}`")

    if not os.path.exists(path):
        st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file `{path}` trong th∆∞ m·ª•c hi·ªán t·∫°i.")
        return None

    try:
        size = os.path.getsize(path)
        st.write(f"‚úÖ File t·ªìn t·∫°i ‚Äî k√≠ch th∆∞·ªõc: {size:,} bytes")
    except Exception as e:
        st.warning(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c k√≠ch th∆∞·ªõc file: {e}")

    mt = mimetypes.guess_type(path)
    st.write("Mime/type d·ª± ƒëo√°n:", mt)

    # N·∫øu l√† xlsx th√¨ check zip
    try:
        if zipfile.is_zipfile(path):
            with zipfile.ZipFile(path) as z:
                st.write("L√† file ZIP (xlsx) ‚Äî ch·ª©a c√°c sheet:", z.namelist()[:10])
        else:
            st.write("Kh√¥ng ph·∫£i file ZIP h·ª£p l·ªá (.xlsx c√≥ th·ªÉ b·ªã l·ªói).")
    except Exception as e:
        st.warning(f"Zip inspect error: {e}")

    # Th·ª≠ m·ªü b·∫±ng openpyxl
    try:
        wb = load_workbook(path, read_only=True)
        sheets = wb.sheetnames
        st.success(f"openpyxl: m·ªü ƒë∆∞·ª£c ‚Äî sheets: {sheets}")
        preview = []
        for i, row in enumerate(wb[sheets[0]].iter_rows(values_only=True, max_row=5)):
            preview.append(row)
        st.write("Preview sheet ƒë·∫ßu:", preview)
        wb.close()
    except Exception:
        st.error("openpyxl kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file.")
        st.text(traceback.format_exc())

    # Th·ª≠ pandas.read_excel
    try:
        df = pd.read_excel(path, engine="openpyxl")
        st.success(f"pandas.read_excel th√†nh c√¥ng ‚Äî shape: {df.shape}")
        return df
    except Exception:
        st.error("pandas.read_excel th·∫•t b·∫°i.")
        st.text(traceback.format_exc())

    # Th·ª≠ pandas.read_csv fallback
    try:
        df2 = pd.read_csv(path)
        st.success(f"pandas.read_csv th√†nh c√¥ng ‚Äî shape: {df2.shape}")
        return df2
    except Exception:
        st.error("pandas.read_csv c≈©ng th·∫•t b·∫°i.")
        st.text(traceback.format_exc())

    return None


# =========================================================
# ƒê·ªåC FILE (C√ì UPLOAD N·∫æU L·ªñI)
# =========================================================
file_now = "data.xlsx"    # th√°ng hi·ªán t·∫°i
file_old = "data3.xlsx"   # 3 th√°ng tr∆∞·ªõc
file_map = "nh.xlsx"      # mapping ng√†nh h√†ng -> nh√≥m

df_now = read_file_debug(file_now, "data (th√°ng hi·ªán t·∫°i)")
df_old = read_file_debug(file_old, "data3 (3 th√°ng tr∆∞·ªõc)")
df_map = read_file_debug(file_map, "mapping (nh.xlsx)")

# N·∫øu c√≥ file n√†o kh√¥ng ƒë·ªçc ƒë∆∞·ª£c th√¨ cho upload tay
if df_now is None or df_old is None or df_map is None:
    st.warning("‚ö†Ô∏è M·ªôt ho·∫∑c nhi·ªÅu file ch∆∞a ƒë·ªçc ƒë∆∞·ª£c. Vui l√≤ng upload tay.")

    up_now = st.file_uploader("Upload data.xlsx", type=["xlsx", "csv"])
    up_old = st.file_uploader("Upload data3.xlsx", type=["xlsx", "csv"])
    up_map = st.file_uploader("Upload nh.xlsx", type=["xlsx", "csv"])

    if up_now:
        try:
            df_now = pd.read_excel(up_now, engine="openpyxl")
        except Exception:
            up_now.seek(0)
            df_now = pd.read_csv(up_now)

    if up_old:
        try:
            df_old = pd.read_excel(up_old, engine="openpyxl")
        except Exception:
            up_old.seek(0)
            df_old = pd.read_csv(up_old)

    if up_map:
        try:
            df_map = pd.read_excel(up_map, engine="openpyxl")
        except Exception:
            up_map.seek(0)
            df_map = pd.read_csv(up_map)

    if df_now is None or df_old is None or df_map is None:
        st.stop()  # D·ª´ng app cho t·ªõi khi c√≥ file h·ª£p l·ªá

# =========================================================
# TI·ªÄN X·ª¨ L√ù D·ªÆ LI·ªÜU
# =========================================================
st.subheader("üìä T·ªïng quan d·ªØ li·ªáu")

st.write("Data th√°ng hi·ªán t·∫°i:", df_now.shape)
st.dataframe(df_now.head())

st.write("Data 3 th√°ng tr∆∞·ªõc:", df_old.shape)
st.dataframe(df_old.head())

st.write("Mapping ng√†nh h√†ng:", df_map.shape)
st.dataframe(df_map.head())

# Merge mapping ƒë·ªÉ l·∫•y nh√≥m ng√†nh
if "Ng√†nh h√†ng" in df_now.columns and "Ng√†nh h√†ng" in df_map.columns:
    df_now = df_now.merge(df_map, on="Ng√†nh h√†ng", how="left")
    df_old = df_old.merge(df_map, on="Ng√†nh h√†ng", how="left")

# =========================================================
# V√ç D·ª§: CH·ªà S·ªê DOANH THU THEO NH√ìM
# =========================================================
if "Nh√≥m" in df_now.columns and "T·ªïng doanh thu" in df_now.columns:
    st.subheader("üìà Doanh thu theo nh√≥m ng√†nh (th√°ng hi·ªán t·∫°i)")
    st.bar_chart(df_now.groupby("Nh√≥m")["T·ªïng doanh thu"].sum())
